image: docker:latest

services:
  - docker:dind

stages:
  - build
  - test
  - registry-update
  - staging-deployment
  - end-to-end-tests
  - production-deployment

build-php-fpm:
  stage: build
  before_script:
    # Read env variables
    - source .env
  script:
    # Build the image
    - docker build --build-arg VERSION=$PHP_VERSION --target test -t sdp-php-fpm:test -f docker/php-fpm/Dockerfile .
    - docker build --build-arg VERSION=$PHP_VERSION --target prod -t sdp-php-fpm:prod -f docker/php-fpm/Dockerfile .
    # Save the image as an artifact
    - mkdir -p build/php-fpm
    - docker save sdp-php-fpm:test -o build/php-fpm/php-fpm-test.tar
    - docker save sdp-php-fpm:prod -o build/php-fpm/php-fpm-prod.tar
  artifacts:
    name: $CI_JOB_NAME-${CI_COMMIT_SHA:0:8}
    expire_in: 1 day
    paths:
      - build/php-fpm
  dependencies: []

build-nginx:
  stage: build
  before_script:
    # Read env variables
    - source .env
  script:
    # Build the image
    - docker build --build-arg VERSION=$NGINX_VERSION --target prod -t sdp-nginx:prod -f docker/nginx/Dockerfile .
    # Save the image as an artifact
    - mkdir -p build/nginx
    - docker save sdp-nginx:prod -o build/nginx/nginx-prod.tar
  artifacts:
    name: $CI_JOB_NAME-${CI_COMMIT_SHA:0:8}
    expire_in: 1 day
    paths:
      - build/nginx
  dependencies: []

build-mysql:
  stage: build
  before_script:
    # Read env variables
    - source .env
  script:
    # Build the image
    - docker build --build-arg VERSION=$MYSQL_VERSION -t sdp-mysql:prod docker/mysql
    # Save the image as an artifact
    - mkdir -p build/mysql
    - docker save sdp-mysql:prod -o build/mysql/mysql-prod.tar
  artifacts:
    name: $CI_JOB_NAME-${CI_COMMIT_SHA:0:8}
    expire_in: 1 day
    paths:
      - build/mysql
  dependencies: []

unit-tests:
  stage: test
  before_script:
    # Load php image from the build stage
    - docker load -i build/php-fpm/php-fpm-test.tar
  script:
    - docker run --rm sdp-php-fpm:test bin/phpunit --testsuit unit --testdox
  dependencies:
    - build-php-fpm

integration-tests:
  stage: test
  before_script:
    # Load php image from the build stage
    - docker load -i build/php-fpm/php-fpm-test.tar
    - docker load -i build/mysql/mysql-prod.tar
    # Start mysql
    - source .env
    - docker network create sdp-net
    - docker run --rm -d --network sdp-net --network-alias mysql -e MYSQL_DATABASE=$MYSQL_DATABASE -e MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD sdp-mysql:prod
  script:
    - docker run --rm --network sdp-net sdp-php-fpm:test sh -c "sh ci/check-connection mysql 3306 && bin/phpunit --testsuit integration --testdox"
  dependencies:
    - build-php-fpm
    - build-mysql

registry-update-php-fpm:
  stage: registry-update
  before_script:
    # Load image from the build stage
    - docker load -i build/php-fpm/php-fpm-prod.tar
  script:
    # Tag the image
    - docker tag sdp-php-fpm:prod babenkoivan/symfony-dummy-project-php-fpm:${CI_COMMIT_SHA:0:8}
    # Push the image
    - echo $CONTAINER_REGISTRY_PASSWORD | docker login -u $CONTAINER_REGISTRY_USER --password-stdin
    - docker push babenkoivan/symfony-dummy-project-php-fpm:${CI_COMMIT_SHA:0:8}
  dependencies:
    - build-php-fpm
  only:
    - cd-pipeline

registry-update-nginx:
  stage: registry-update
  before_script:
    # Load image from the build stage
    - docker load -i build/nginx/nginx-prod.tar
  script:
    # Tag the image
    - docker tag sdp-nginx:prod babenkoivan/symfony-dummy-project-nginx:${CI_COMMIT_SHA:0:8}
    # Push the image
    - echo $CONTAINER_REGISTRY_PASSWORD | docker login -u $CONTAINER_REGISTRY_USER --password-stdin
    - docker push babenkoivan/symfony-dummy-project-nginx:${CI_COMMIT_SHA:0:8}
  dependencies:
    - build-nginx
  only:
    - cd-pipeline

registry-update-mysql:
  stage: registry-update
  before_script:
    # Load image from the build stage
    - docker load -i build/mysql/mysql-prod.tar
  script:
    # Tag the image
    - docker tag sdp-mysql:prod babenkoivan/symfony-dummy-project-mysql:${CI_COMMIT_SHA:0:8}
    # Push the image
    - echo $CONTAINER_REGISTRY_PASSWORD | docker login -u $CONTAINER_REGISTRY_USER --password-stdin
    - docker push babenkoivan/symfony-dummy-project-mysql:${CI_COMMIT_SHA:0:8}
  dependencies:
    - build-mysql
  only:
    - cd-pipeline

staging-deploy:
  stage: staging-deployment
  image: babenkoivan/helm-gke
  before_script:
    # Activate the service account
    - sh ci/activate-service-account $SERVICE_ACCOUNT_KEY
    # Fetch cluster credentials
    - sh ci/get-cluster-credentials $CLUSTER_NAME_STAGE $CLUSTER_ZONE_STAGE
  script:
    - helm upgrade symfony-dummy-project helm --install --set-string phpfpm.env.plain.APP_ENV=stage,nginx.host=stage.symfony-dummy-project.io,imageTag=${CI_COMMIT_SHA:0:8} --namespace symfony-dummy-project
  dependencies: []
  only:
    - cd-pipeline

staging-rollback:
  stage: staging-deployment
  image: babenkoivan/helm-gke
  before_script:
    # Activate the service account
    - sh ci/activate-service-account $SERVICE_ACCOUNT_KEY
    # Fetch cluster credentials
    - sh ci/get-cluster-credentials $CLUSTER_NAME_STAGE $CLUSTER_ZONE_STAGE
  script:
    - helm rollback symfony-dummy-project 0
  dependencies: []
  when: manual
  only:
    - cd-pipeline

production-deploy:
  stage: production-deployment
  image: babenkoivan/helm-gke
  before_script:
    # Activate the service account
    - sh ci/activate-service-account $SERVICE_ACCOUNT_KEY
    # Fetch cluster credentials
    - sh ci/get-cluster-credentials $CLUSTER_NAME_PROD $CLUSTER_ZONE_PROD
  script:
    - helm upgrade symfony-dummy-project helm --install --set-string phpfpm.env.plain.APP_ENV=prod,nginx.host=symfony-dummy-project.io,imageTag=${CI_COMMIT_SHA:0:8} --namespace symfony-dummy-project
  dependencies: []
  when: manual
  only:
    - cd-pipeline

production-rollback:
  stage: production-deployment
  image: babenkoivan/helm-gke
  before_script:
    # Activate the service account
    - sh ci/activate-service-account $SERVICE_ACCOUNT_KEY
    # Fetch cluster credentials
    - sh ci/get-cluster-credentials $CLUSTER_NAME_PROD $CLUSTER_ZONE_PROD
  script:
    - helm rollback symfony-dummy-project 0
  dependencies: []
  when: manual
  only:
    - cd-pipeline
